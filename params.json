{
  "name": "MongoDB.Context",
  "tagline": "Object Change Tracking for MongoDB entities",
  "body": "### Welcome to the MongoDB.Context project!\r\nThis project aims to simplify access to (and modification of) MongoDB entities. I've been working on this project for some weeks now offline, and thought it time to bring it to the open source domain for assistance and advice.\r\n\r\n### Background\r\nIf you've used the Official MongoDB driver for C# before, you'll know the level of complexity in performing trivial queries, let alone updates to those entities. The inspiration from this project comes from the Linq2Sql DataContext syntactical pattern, which I have become very familiar with through my software engineering experience at my Monday-Friday job.\r\n\r\n### Roadmap and vision\r\nAs above, the main inspiration for this project came from Linq2Sql DataContext, meaning the syntax (in an ideal implementation) would be similar to the following:\r\n\r\n    using (var ctx = new MongoDbContext()) \r\n    { \r\n        var entity = ctx.Entities.Find(z => z.Foo == \"Bar\").SingleOrDefault();\r\n        entity.Baz = 1;\r\n\r\n        ctx.SubmitChanges();\r\n    }\r\n\r\n### Authors and Contributors\r\n@cadams93 - main contributor\r\n\r\nIf you want to see your name in this list, please do not hesitate to contribute, critique and assist!\r\n\r\n### Assumptions and Drawbacks (current)\r\n* Currently the main MongoDbContext class is manually generated to include the Entities property - main access to the MongoDB entities named `Entity`. Eventually this shall be replaced by an automatically generated context\r\n* An assumption has been made that ALL entities stored in MongoDB to be accessed through the MongoDbContext will inherit from AbstractMongoEntityWithId, with a given _id generic type",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}